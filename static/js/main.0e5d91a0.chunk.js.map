{"version":3,"sources":["reducers/videos.js","reducers/index.js","components/addVideo.jsx","actions/index.js","components/shuffle.jsx","components/autoplay.jsx","components/playList.jsx","components/videoPlayer.jsx","components/main.jsx","App.js","serviceWorker.js","index.js","localstorage.js"],"names":["initialState","playlist","autoplay","shuffleArray","array","i","length","j","Math","floor","random","videos","state","action","type","filter","el","id","payload","alert","concat","slice","combineReducers","AddVideoComponent","props","link","handleChange","bind","handleClick","event","this","setState","target","value","preventDefault","validLink","trim","match","addVideo","style","margin","textAlign","onChange","placeholder","onClick","marginLeft","Component","AddVideo","connect","dispatch","video","ShuffleComponent","shuffle","verticalAlign","src","alt","Shuffle","AutoplayComponent","changeAutoplay","Autoplay","PlayListComponent","hanldeClick","removeVideo","map","key","border","padding","PlayList","VideoPlayerComponent","handleEnd","getPlayerState","playVideo","removeTopVideo","opts","height","width","playerVars","onStateChange","onEnd","videoId","VideoPlayer","Main","className","App","Boolean","window","location","hostname","persistedStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","rootReducer","subscribe","stringify","setItem","console","log","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e5d91a0.chunk.js","sourcesContent":["const initialState = {\n  playlist: [],\n  autoplay: false\n}\n\n/* Randomize array in-place using Durstenfeld shuffle algorithm */\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nconst videos = (state = initialState, action) => {\n  let autoplay = state.autoplay;\n  let playlist = [...state.playlist];\n  switch (action.type) {\n    case 'ADD_VIDEO':\n      if (!(playlist.filter(el => el.id === action.payload.id).length > 0)) {\n        playlist = state.playlist.concat(action.payload)\n      } else {\n        alert('Link already present');\n      }\n      return { playlist, autoplay };\n\n    case 'REMOVE_VIDEO':\n      return {\n        playlist: playlist.filter((el) => el.id !== action.payload.id),\n        autoplay\n      };\n\n    case 'REMOVE_TOP_VIDEO':\n      return {\n        playlist: playlist.slice(1),\n        autoplay\n      };\n\n    case 'SHUFFLE':\n      if (playlist.length > 0) {\n        shuffleArray(playlist);\n      }\n      return { playlist, autoplay };\n\n    case 'AUTOPLAY':\n      return {\n        playlist,\n        autoplay: !autoplay\n      };\n\n    default:\n      return state\n  }\n}\n\nexport default videos\n","import { combineReducers } from 'redux'\nimport videos from './videos'\n\nexport default combineReducers({\n  videos\n})","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addVideo } from \"../actions/index\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addVideo: (video) => dispatch(addVideo(video)),\n  };\n}\n\nclass AddVideoComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      link: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.id]: event.target.value });\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    const { link } = this.state;\n    const regex = /^(?:https?:\\/\\/)?(?:www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\n    const validLink = link.trim().match(regex);\n    if (validLink && validLink[0] === link.trim()) {\n      this.props.addVideo(validLink[1]);\n      this.setState({ link: \"\" });\n    } else {\n      alert(\"Link not valid\");\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ margin: 25, textAlign: \"center\" }}>\n        <input\n          onChange={this.handleChange}\n          id=\"link\"\n          type=\"text\"\n          value={this.state.link}\n          placeholder='Enter YouTube Video Link'\n        />\n        <button onClick={this.handleClick} style={{ marginLeft: 10 }}>\n          Add\n        </button>\n      </div>\n    );\n  }\n}\n\nconst AddVideo = connect(null, mapDispatchToProps)(AddVideoComponent);\n\nexport default AddVideo;\n","export const addVideo = link => ({\n  type: 'ADD_VIDEO',\n  payload: {\n    id: link,\n    link\n  }\n})\n\nexport const removeVideo = id => ({\n  type: 'REMOVE_VIDEO',\n  payload: {\n    id\n  }\n})\n\nexport const removeTopVideo = () => ({\n  type: 'REMOVE_TOP_VIDEO'\n})\n\nexport const shuffle = () => ({\n  type: 'SHUFFLE'\n})\n\nexport const autoplay = () => ({\n  type: 'AUTOPLAY'\n})","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { shuffle } from \"../actions\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    shuffle: (video) => dispatch(shuffle(video)),\n  };\n}\n\nclass ShuffleComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.shuffle();\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>\n          <img\n            style={{ verticalAlign: 'middle', margin: 5 }}\n            src=\"https://icongr.am/entypo/shuffle.svg?size=15&color=currentColor\"\n            alt=\"shuffle\"\n          />\n          <span style={{ verticalAlign: 'middle', margin: 5 }}>Shuffle</span>\n        </button>\n      </div>\n    );\n  }\n}\n\nconst Shuffle = connect(null, mapDispatchToProps)(ShuffleComponent);\n\nexport default Shuffle;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { autoplay } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return { autoplay: state.videos.autoplay };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeAutoplay: (video) => dispatch(autoplay(video)),\n  };\n}\n\nclass AutoplayComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.changeAutoplay();\n  }\n\n  render() {\n    let autoplay = this.props.autoplay;\n    return (\n      <div>\n        <button onClick={this.handleClick}>\n          <span>AutoPlay: {autoplay? 'ON' : 'OFF'}</span>\n        </button>\n      </div>\n    );\n  }\n}\n\nconst Autoplay = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AutoplayComponent);\n\nexport default Autoplay;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeVideo } from \"../actions\";\nimport Shuffle from \"./shuffle\";\nimport Autoplay from \"./autoplay\";\n\nconst mapStateToProps = (state) => {\n  return { videos: state.videos };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeVideo: (video) => dispatch(removeVideo(video)),\n  };\n}\n\nclass PlayListComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.hanldeClick = this.hanldeClick.bind(this);\n  }\n\n  hanldeClick(id) {\n    this.props.removeVideo(id);\n  }\n\n  render() {\n    const { playlist } = this.props.videos;\n    return (\n      <div style={{ margin: 25, textAlign: \"center\" }}>\n        <h4>Playlist:</h4>\n        <hr />\n        <div>\n          <Shuffle />\n          <Autoplay />\n        </div>\n        <hr/>\n        <ul>\n          {playlist.map((el) => (\n            <li key={el.id}>\n              youtu.be/{el.link}\n              <button\n                style={{ border: 0, padding: 0, marginLeft: 10 }}\n                onClick={() => this.hanldeClick(el.id)}\n              >\n                <img\n                  src=\"https://icongr.am/entypo/trash.svg?size=20&color=currentColor\"\n                  alt=\"delete\"\n                />\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst PlayList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlayListComponent);\n\nexport default PlayList;\n","import React, { Component } from \"react\";\nimport Youtube from \"react-youtube\";\nimport { connect } from \"react-redux\";\nimport { removeTopVideo } from \"../actions/index\";\n\nconst mapStateToProps = (state) => {\n  return { videos: state.videos };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeTopVideo: (video) => dispatch(removeTopVideo(video)),\n  };\n}\n\nclass VideoPlayerComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      autoplay: false,\n    };\n  }\n\n  handleChange(event) {\n    if (event.target.getPlayerState() === -1 && this.props.videos.autoplay)\n      event.target.playVideo();\n  }\n\n  handleEnd() {\n    this.props.removeTopVideo();\n  }\n\n  render() {\n    const opts = {\n      height: \"240\",\n      width: \"320\",\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 0,\n      },\n    };\n    const src = this.props.videos.playlist;\n\n    if (src.length > 0) {\n      return (\n        <div style={{ margin: 25, textAlign: \"center\" }}>\n          <Youtube\n            opts={opts}\n            onStateChange={this.handleChange}\n            onEnd={this.handleEnd}\n            videoId={src[0].link}\n          />\n        </div>\n      );\n    }\n\n    return <h5 style={{ textAlign: \"center\" }}>List is empty</h5>;\n  }\n}\n\nconst VideoPlayer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(VideoPlayerComponent);\n\nexport default VideoPlayer;\n","import React, { Component } from \"react\";\nimport AddVideo from \"./addVideo\";\nimport PlayList from \"./playList\";\nimport VideoPlayer from './videoPlayer';\n\nclass Main extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"seven columns\" >\n          <AddVideo />\n          <hr/>\n          <VideoPlayer />\n        </div>\n        <div className='five columns' >\n          <PlayList />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className='container'>\n      <h3 style={{ textAlign: 'center' }}>Youtube Playlist</h3>\n      <div className='row'>\n        <Main />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from './reducers/'\nimport \"./css/skeleton.css\";\nimport App from \"./App\";\nimport { loadState, saveState } from './localstorage';\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst persistedStore = loadState();\nconst store = createStore(rootReducer, persistedStore);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (!serializedState) return undefined;\n    else return JSON.parse(serializedState);\n  } catch(err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch(err) {\n    console.log(err);\n  }\n};"],"sourceRoot":""}